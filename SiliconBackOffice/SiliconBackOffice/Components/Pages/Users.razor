@page "/Users"
@using SiliconBackOffice.Data
@attribute [StreamRendering]

<PageTitle>Users</PageTitle>

<div class="container mt-5">
    <div class="text-center">
        <h1>User Management</h1>
        <p class="lead">Manage user accounts, roles, and permissions.</p>
    </div>

    <table class="table table-hover mt-4">
        <thead class="thead-dark">
            <tr>
                <th scope="col">ID</th>
                <th scope="col">Username</th>
                <th scope="col">Email</th>
                <th scope="col">Roles</th>
                <th scope="col">Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in users)
            {
                <tr>
                    <td>@user.Id</td>
                    <td>@user.UserName</td>
                    <td>@user.Email</td>
                    <td>@(userRoles.ContainsKey(user.Id) ? string.Join(", ", userRoles[user.Id]) : "No Roles")</td>
                    <td>
                        <button class="btn btn-sm btn-primary" @onclick="@(async () => await AssignRole(user, "NewRole"))">Assign Role</button>
                        <button class="btn btn-sm btn-danger" @onclick="@(async () => await DeleteUser(user))">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

@code {
    private List<ApplicationUser> users = new List<ApplicationUser>();
    private Dictionary<string, List<string>> userRoles = new Dictionary<string, List<string>>();

    [Inject]
    private UserService UserService { get; set; }

    protected override async Task OnInitializedAsync()
    {
        users = await UserService.GetUsersAsync();
        foreach (var user in users)
        {
            var roles = await UserService.GetRolesAsync(user);
            userRoles[user.Id] = new List<string>(roles);
        }
    }

    private async Task AssignRole(ApplicationUser user, string role)
    {
        await UserService.AssignRole(user, role);
        userRoles[user.Id] = new List<string>(await UserService.GetRolesAsync(user));
    }

    private async Task DeleteUser(ApplicationUser user)
    {
        await UserService.DeleteUser(user);
        users = await UserService.GetUsersAsync();
    }
}
