@page "/savedCourses"
@using Microsoft.AspNetCore.Components.Forms

@rendermode InteractiveServer
@attribute [StreamRendering]

<PageTitle>Saved Courses</PageTitle>

<h1>Saved courses</h1>

@if (_savedCourses == null)
{
    <div>Loading ....</div>
}
else
{

    @foreach (var course in _savedCourses)
    {
        <EditForm Model="@course" class="form-control saved-courses-form">
            <ChildContent>
               
               
                <div class="form-wrapper-saved-courses">
                    <div class="form-group-saved-users-id">
                        <label id="user-id-label">User Id</label>
                        <InputText @bind-Value="course.UserId" id="user-id-input" />
                        <label id="user-id-label">User Name</label>
                        <InputText @bind-Value="course.UserId" id="user-id-input" />
                    </div>
                    <div class="form-group-saved-courses-id">
                        <label id="course-id-label">Course Id</label>
                        <InputText @bind-Value="course.CourseId" id="course-id-input" />
                        @* @foreach (var courseName in ) *@
                        <label id="course-id-label">Course Name</label>
                        <InputText @bind-Value="_course.Title" id="course-id-input" />
                    </div>
                    <div class="checkbox-wrapper">
                        <div class="checkbox-group-form">
                            <label id="bookmark-lable">Bookmarked</label>
                            <InputCheckbox style="width: 1.5rem; " id="bookmark-input" @bind-Value="course.IsBookmarked" />
                        </div>
                        <div class="checkbox-group-form">
                            <label id="has-joined-label">Has Joined</label>
                            <InputCheckbox id="has-joined-input" @bind-Value="course.HasJoined" />
                        </div>
                    </div>
                  
                </div>
            </ChildContent>
        </EditForm>
    }

}
@code {
    public IEnumerable<SavedCoursesModel>? _savedCourses { get; set; }

    public Course? _course { get; set; }


    protected override async Task OnInitializedAsync()
    {
        _savedCourses = await _savedCoursesService.GetSavedCoursesAsync("ed628e1f-d322-49ec-b617-77ed7f022694");
        _course = await _courseService.GetOneCourseByIdAsync("");

    }
}
