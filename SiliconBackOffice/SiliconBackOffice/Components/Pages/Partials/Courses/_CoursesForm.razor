@using SiliconBackOffice.Models.Courses

@if (Courses == null)
{
    <p>Loading...</p>
}
else
{
    @foreach (var course in Courses)
{

    <div class="grid-item card">
        <div class="img-wrapper">
            <img class="course-image" src="/img/courses/@course.ImageUri" alt="@course.AltText">
            <p class="@(course.BestSeller ? "best-seller" : "hidden")">Best Seller</p>
        </div>
        <div class="bookmark-circle">

            <i class="fa-regular fa-bookmark bookmark-empty"></i>

        </div>
        <div class="text-wrapper">
            <div class="text-title">
                <h5 class="course-title">@course.Title</h5>
            </div>
            <div class="text-rest">
                <span class="by">By</span>
                @if (course.Authors != null && course.Authors.Count() > 0)
                {
                    int i = 0;
                    foreach (var author in course.Authors)
                    {
                        <span class="author">@author.Name</span>
                        i++;
                        if (course.Authors.Count() != i)
                        {
                            <span> & </span>
                        }
                    }
                }
                <div class="price-wrapper">
                    <div class="@(course.DiscountPrice >= 1 ? "discount-price" : "hidden")">
                        @course.Currency@course.DiscountPrice.ToString("0.00", System.Globalization.CultureInfo.InvariantCulture)
                    </div>
                    <div class="@(course.DiscountPrice >= 1 ? "price discount-applied" : "price")">
                        @course.Currency@course.Price.ToString("0.00", System.Globalization.CultureInfo.InvariantCulture)
                    </div>
                </div>
                <div class="divider"></div>
                <div class="description-wrapper">
                    @{
                        double likesInK = Math.Max(0, Math.Round(course.NumberOfLikes / 1000.0, 1));
                    }
                    <span class="description"><i class="fa-light fa-clock"></i> @course.LengthInHours hours</span>
                    <span class="description"><i class="fa-light fa-thumbs-up"></i> @course.RatingInPercentage% (@likesInK K)</span>
                </div>
            </div>
        </div>
    </div>
}    
}


@code {
    private IEnumerable<Course>? Courses { get; set; }
    private IEnumerable<CategoryModel>? Categories { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var result = await _courseService.GetAllCoursesAsync("", "", 1, 9);

        Courses = result.Courses;
    }

}
