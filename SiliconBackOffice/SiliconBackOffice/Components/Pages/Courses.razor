@page "/courses"

@rendermode InteractiveServer
@attribute [StreamRendering]

<PageTitle>Courses</PageTitle>

<section class="courses">
    <div class="container-test">
        <div class="page-title">
            <h1>Courses Management</h1>
            <p class="lead">Manage courses, descriptions, content, and categories.</p>
            
            <button class="btn btn-theme" @onclick="CreateNewcCurse">Create New Course</button>
        </div>
        

        <table class="table table-hover courses-aside">
            <thead class="thead-dark">
                <tr>
                    <th scope="col">Course Name</th>
                </tr>
            </thead>
            

            <tbody>
                @if (_courses == null)
                {
                    <div>Loading...</div>
                }
                else
                {
                    @foreach (var course in _courses)
                    {
                        <tr>
                            <td>@course.Title</td>    
                            <td>
                                <button class="btn btn-sm btn-primary" @onclick="() => EditCourse(course)">View/Edit</button>                                
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>

        <_CoursesBox _course="_courseById" />

        <_CoursesForm _course="_courseById" />

    </div>
</section>

@code {
    private IEnumerable<Course> _courses { get; set; } = [];
    private Course? _courseById { get; set; }
    private IEnumerable<CategoryModel> _categories { get; set; } = [];

    protected override async Task OnInitializedAsync()
    {
        var result = await _courseService.GetAllCoursesAsync("", "", 1, 999);
        if (result != null)
        {
            _courses = result.Courses;            
        }
    }

    private async Task EditCourse(Course course)
    {
        var result = await _courseService.GetOneCourseByIdAsync(course.Id);
        if (result != null)
        {
            _courseById = result;
        }
    }

    public async Task CreateNewcCurse()
    {
        _courseById = new Course()
            {
                Categories = ["", "", "", ""],
                Authors = [
                    new Author(),
                    new Author()
                ],
                Content = new()
                {
                    Courseincludes = [string.Empty, string.Empty, string.Empty, string.Empty],
                    WhatYouLearn = ["", "", "", ""],
                    ProgramDetails = [
                        new ProgramDetails(){ Description = []},
                        new ProgramDetails(){ Description = []},
                        new ProgramDetails(){ Description = []},
                        new ProgramDetails(){ Description = []},
                        new ProgramDetails(){ Description = []},
                        new ProgramDetails(){ Description = []},
                    ]
                }

        };
    }


    private void DeleteCourse(Course course)
    {

        //courses.Remove(course);
    }
}
