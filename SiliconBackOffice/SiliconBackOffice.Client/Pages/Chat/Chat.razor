@page "/chat"
<PageTitle>Silicon BackOffice | Chat</PageTitle>

@* @attribute [Authorize] *@
@rendermode InteractiveAuto
@attribute [StreamRendering]

@inject NavigationManager navigationManager
@inject AuthenticationStateProvider authenticationStateProvider
@inject IJSRuntime jsRuntime

@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.SignalR.Client

<section id="message-page">
    <div class="container">
        <div class="row">

            <h2>Welcome!</h2>
            <h5>Sillicon supportchat - Backoffice</h5>

            <div class="col">
                <div class="card">
                    <div class="card-header">Be professional and polite in your response.</div>
                    <div class="card-body message-container" @ref="chatWindow">
                        <ul class="list-group">
                            @foreach (var message in messages)
                            {
                                <li class="mb-3 list-group-item @(message.UserName == userName ? "bubble-right" : "bubble-left")">
                                    <div class="message-user-name"><strong>@message.UserName -</strong><span>@message.Created.ToString(" HH:mm:ss")</span></div>
                                    <div class="message-content">@message.Message</div>
                                </li>
                            }
                        </ul>
                    </div>
                    <div class="card-footer">
                        <div class="typing-user">
                            @if (!string.IsNullOrEmpty(typingUser))
                            {
                                <div>@typingUser is typing</div>
                                <div class="dots">
                                    <div class="dot"></div>
                                    <div class="dot"></div>
                                    <div class="dot"></div>
                                </div>
                            }
                        </div>
                        <div class="mt-2">
                            <textarea class="form-control" placeholder="Message" @bind="currentMessage" @oninput="NotifyTyping"></textarea>
                        </div>
                        <div class="col-2 my-3">
                            <button class="btn-theme" @onclick="Send">Send Message</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>


@code {
    // [Parameter]
    // private UserManager<ApplicationUser>? userManager { get; set; }

    private HubConnection? connection;
    private bool isConnected => connection!.State == HubConnectionState.Connected;
    private string? userName;
    private string? typingUser;
    private System.Timers.Timer? typingTimer;

    private List<ChatMessage> messages = new();
    private string currentMessage;

    private ElementReference chatWindow;
    private const int OverShootAmount = int.MaxValue;

    private class ChatMessage
    {
        public string? Message { get; set; }
        public string? UserName { get; set; }
        public DateTime Created { get; set; } = DateTime.Now;
    }

    private async Task NotifyTyping() => await connection!.SendAsync("Typing", userName);

    private async Task Send()
    {
        if (!string.IsNullOrEmpty(currentMessage))
        {
            var message = new ChatMessage { UserName = userName, Message = currentMessage };
            await connection!.SendAsync("SendMessageToAll", message.UserName, message.Message, message.Created);
            //messages.Add(message);

            currentMessage = "";            
            await InvokeAsync(StateHasChanged);
            await ScrollToBottom();
        }
    }

    private async Task ScrollToBottom()
    {
        await jsRuntime.InvokeVoidAsync("scrollToBottom", chatWindow, OverShootAmount);
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated ?? false)
        {
            userName = user.Identity.Name;
        }
        else
        {
            userName = "Anonymous";
        }

        connection = new HubConnectionBuilder().WithUrl(navigationManager.ToAbsoluteUri("/chathub")).Build();

        connection.On<string, string?, string, DateTime>("ReceiveMessage", (fromUser, toUser, message, dateTime) =>
        {
            var newMessage = new ChatMessage { UserName = fromUser, Message = message };
            messages.Add(newMessage);         
            InvokeAsync(StateHasChanged);
        });

        connection.On<string>("UserTyping", (typingUserName) =>
        {
            typingUser = typingUserName;
            InvokeAsync(StateHasChanged);

            typingTimer?.Stop();
            typingTimer = new System.Timers.Timer(2000);
            typingTimer.Elapsed += (s, e) =>
            {
                typingUser = null;
                InvokeAsync(StateHasChanged);
            };

            typingTimer.Start();

        });
        
        await connection.StartAsync();
    }
}
